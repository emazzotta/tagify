#!/usr/bin/env python3

import glob
import re
import os
import argparse

parser = argparse.ArgumentParser(description='Parse YAML Front Matters and write according OSX file tags.')
parser.add_argument('-p', '-path', type=str,
                    help='Path to folder which contains markdown files.')


class Stats(object):
    def __init__(self):
        self.tag_counter = 0
        self.file_counter = 0

    def count_tag(self):
        self.tag_counter += 1

    def count_file(self):
        self.file_counter += 1

    def display_statistics(self):
        """
        Display statistics as osx notification
        """
        os.system(
            "osascript -e \'display notification \"{} Tags von {} Notizen erzeugt\" with title \"Tagify\"\'".format(
                self.tag_counter, self.file_counter))


def wrap_tags(tags):
    """
    Wrap tags in xml
    """
    xml_tags = []
    for tag in tags:
        xml_tags.append("{}{}{}".format("<string>", tag.strip(), "</string>"))
        stats.count_tag()
    return "".join(xml_tags)


def write_tags_to_file(xml_tags, filename):
    """
    Write wrapped xml tags to a file
    """
    os.system(
        "xattr -w \'com.apple.metadata:_kMDItemUserTags\' \'<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"><plist version=\"1.0\"><array>{0}</array></plist>\' \'{1}\'".format(
            xml_tags, filename))


def tag_files(file_path):
    """
    Read front matter tags in each file in file path
    """
    for file in file_path:
        with open(file, "r") as md_file:
            md_content = md_file.read()
        yaml_search = re.search('^---\n(.*)\n---', md_content)
        if yaml_search:
            yaml_front_matter = {
                "file": file,
                "tags": yaml_search.group(1).replace("Tags: ", "").replace("'", "").split(',')
            }
            filename = yaml_front_matter['file']
            tags = yaml_front_matter['tags']
            xml_tags = wrap_tags(tags)
            write_tags_to_file(xml_tags, filename)
            stats.count_file()

    stats.display_statistics()


stats = Stats()


def main():
    args = parser.parse_args()
    tag_files(glob.glob(args.p + "/**/*.md", recursive=True))


if __name__ == '__main__':
    main()
